import { expect } from "jsr:@std/expect";
import { mapRobots, mapRobotsSafety, robotsXMasSafety, xmasTree } from "../dec-14.ts";

const { test } = Deno;

test("sample safety 12", () => {
  expect(mapRobotsSafety(sample, 100, 11, 7)).toEqual(12);
});

test("sample easter egg", () => {
  expect(mapRobots(sample, 0, 10000, 11, 7)).toBeLessThan(2147483647101103);
});

test("xmas tree 0,3", () => {
  expect(xmasTree([
    [[3, 0], []],
    [[3, 1], []],
    [[2, 1], []],
    [[4, 1], []],
    [[3, 2], []],
    [[2, 2], []],
    [[4, 2], []],
    [[1, 2], []],
    [[5, 2], []],
    [[2, 3], []],
    [[3, 3], []],
    [[4, 3], []],
  ], 11, 7)).toBe(true);
});

test("xmas tree 0,2", () => {
  expect(xmasTree([
    [[2, 0], []],
    [[2, 1], []],
    [[1, 1], []],
    [[3, 1], []],
    [[2, 2], []],
    [[1, 2], []],
    [[3, 2], []],
    [[0, 2], []],
    [[4, 2], []],
    [[2, 3], []],
    [[1, 3], []],
    [[3, 3], []],
  ], 11, 7)).toBe(true);
});
test("xmas tree 0,4", () => {
  expect(xmasTree([
    [[4, 0], []],
    [[4, 1], []],
    [[3, 1], []],
    [[5, 1], []],
    [[4, 2], []],
    [[2, 2], []],
    [[3, 2], []],
    [[6, 2], []],
    [[5, 2], []],
    [[4, 3], []],
    [[3, 3], []],
    [[5, 3], []],
  ], 11, 7)).toBe(true);
});

test("xmas tree 1,3", () => {
  expect(xmasTree([
    [[3, 1], []],
    [[3, 2], []],
    [[2, 2], []],
    [[4, 2], []],
    [[3, 3], []],
    [[2, 3], []],
    [[4, 3], []],
    [[1, 3], []],
    [[5, 3], []],
    [[2, 4], []],
    [[3, 4], []],
    [[4, 4], []],
  ], 11, 7)).toBe(true);
});

test("xmas tree 1,2", () => {
  expect(xmasTree([
    [[2, 1], []],
    [[2, 2], []],
    [[1, 2], []],
    [[3, 2], []],
    [[2, 3], []],
    [[1, 3], []],
    [[3, 3], []],
    [[0, 3], []],
    [[4, 3], []],
    [[2, 4], []],
    [[1, 4], []],
    [[3, 4], []],
  ], 11, 7)).toBe(true);
});
test("xmas tree 1,4", () => {
  expect(xmasTree([
    [[4, 1], []],
    [[4, 2], []],
    [[3, 2], []],
    [[5, 2], []],
    [[4, 3], []],
    [[2, 3], []],
    [[3, 3], []],
    [[6, 3], []],
    [[5, 3], []],
    [[4, 4], []],
    [[3, 4], []],
    [[5, 4], []],
  ], 11, 7)).toBe(true);
});

test("wide xmas tree 0,3", () => {
  expect(xmasTree([
    [[3, 0], []],
    [[3, 1], []],
    [[2, 1], []],
    [[4, 1], []],
    [[3, 2], []],
    [[2, 2], []],
    [[4, 2], []],
    [[1, 2], []],
    [[5, 2], []],
    [[0, 2], []],
    [[3, 3], []],
    [[6, 2], []],
  ], 11, 7)).toBe(false);
});

const sampleRobots: string[] = [
  'p=0,4 v=3,-3',
  'p=6,3 v=-1,-3',
  'p=10,3 v=-1,2',
  'p=2,0 v=2,-1',
  'p=0,0 v=1,3',
  'p=3,0 v=-2,-2',
  'p=7,6 v=-1,-3',
  'p=3,0 v=-1,-2',
  'p=9,3 v=2,3',
  'p=7,3 v=-1,2',
  'p=2,4 v=2,-3',
  'p=9,5 v=-3,-3',
];
const sample = sampleRobots.map((r) => r.split(" ").map(d => d.split('=')[1].split(',').map(p => parseInt(p))));